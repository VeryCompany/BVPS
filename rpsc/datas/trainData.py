import pickle

beacon = [23042, 22403, 22816, 22723, 22887]

# [-87, -75, -81, -100, -79], [-84, -81, -90, -74, -77], [-77, -79, -91, -77, -79], [-79, -78, -86, -80, -88],
#     [-100, -80, -92, -78, -83], [-86, -74, -84, -74, -100], [-80, -82, -83, -79, -100], [-78, -77, -90, -78, -100],
#     [-100, -77, -100, -80, -84], [-100, -81, -79, -74, -83], [-84, -73, -88, -72.5, -74], [-81, -76, -86, -79, -81],
#     [-77, -76, -77, -79, -80],

# [-70, -61, -70, -70, -65], [-66, -63, -70, -70, -65], [-67, -60, -62, -66, -74], [-74, -61, -62, -63, -70], [-66, -69, -60, -69, -63],
#     [-67, -73, -60, -58, -70], [-73, -66, -62, -66, -66], [-81, -66, -62, -66, -64], [-73, -72, -64, -66, -66], [-71, -72, -77, -68, -66],


# [-66, -68, -80, -74, -54], [-67, -68, -73, -68, -51], [ -63, -61, -70, -59, -55], [ -64, -66, -73, -61, -59],[-78, -64, -73, -66, -58],
#     [-66, -62, -70, -67, -63], [-66, -62, -70, -61, -63], [-66, -65, -65, -73, -56], [-67, -64, -68, -73, -56],[-68, -61, -68,-72, -60],

# [-85, -71,  -58, -60, -60], [-64,  -57, -58, -58, -73], [-73, -61, -59,  -58, -70], [-70, -61, -62, -58, -66],[-55, -66, -70, -54, -62],
    # [ -62, -62,  -59, -58, -68],[ -65, -60, -59, -60, -68], [-74,-71, -70, -61, -72], [-56, -60, -56, -59, -65],[ -55, -66, -70,-60, -62],

# [-64, -61, -66, -62, -79],[-67, -61, -66, -62, -79],[-67, -61, -67, -62, -79],[-67, -61, -67, -60, -79],[-67, -63, -67, -60, -79],[-67, -63, -67, -60, -71],[-64, -64, -67, -60, -71],[-64, -64, -66, -60, -71],[-64, -64, -68, -60, -71],[-64, -61, -66, -60, -71],[-64, -61, -67, -60, -71],[-64, -61, -67, -60, -72],[-64, -61, -67, -56, -72],[-64, -74, -67, -56, -72],[-64, -74, -67, -60, -72],[-64, -74, -76, -60, -72],[-64, -72, -76, -56, -72],[-64, -72, -76, -56, -69],[-64, -72, -76, -58, -69],[-64, -66, -76, -51, -69],[-64, -66, -66, -51, -69],[-64, -73, -66, -51, -69],[-64, -64, -66, -51, -69],[-64, -64, -69, -51, -69],[-64, -67, -69, -54, -69],[-64, -67, -72, -54, -69],[-64, -67, -72, -54, -73],[-64, -67, -72, -54, -68],[-78, -67, -72, -54, -68],[-78, -62, -72, -71, -68],[-67, -62, -72, -71, -68],[-67, -62, -72, -70, -68],[-70, -62, -72, -70, -68],[-70, -62, -70, -70, -68],[-71, -62, -70, -61, -68],[-71, -62, -68, -61, -68],[-84, -62, -68, -61, -68],[-84, -62, -68, -61, -78],[-78, -70, -68, -61, -78],[-78, -70, -75, -61, -78],[-78, -70, -75, -63, -78],[-78, -70, -76, -63, -78],[-78, -70, -76, -66, -78],[-78, -70, -72, -66, -78],[-78, -70, -72, -68, -78],[-70, -70, -72, -68, -78],[-70, -70, -72, -65, -78],[-70, -70, -72, -65, -71],[-70, -71, -72, -63, -71],[-70, -71, -75, -63, -71],[-74, -71, -75, -63, -71],[-74, -70, -75, -63, -71],[-74, -70, -74, -63, -71],[-74, -70, -74, -63, -84],[-82, -75, -74, -63, -84],[-82, -75, -74, -72, -84],[-78, -75, -74, -72, -84],[-77, -75, -74, -72, -84],[-77, -75, -74, -72, -72],[-77, -71, -74, -59, -72],[-77, -69, -74, -59, -72],[-77, -60, -74, -57, -72],[-77, -60, -75, -57, -72],[-77, -60, -75, -57, -70],[-66, -60, -75, -57, -70],[-66, -60, -74, -57, -70],[-67, -60, -74, -57, -70],[-67, -60, -74, -57, -71],[-67, -66, -74, -57, -71],[-67, -66, -78, -57, -71],[-67, -66, -78, -57, -70],[-68, -66, -78, -57, -70],[-68, -66, -67, -57, -70],[-68, -66, -68, -57, -70],[-68, -66, -68, -62, -70],[-65, -66, -68, -62, -71],[-65, -66, -68, -62, -72],[-65, -66, -65, -62, -72],[-65, -66, -65, -62, -73],[-65, -66, -65, -63, -73],[-65, -66, -74, -63, -73],[-65, -66, -74, -70, -73],[-77, -66, -74, -70, -73],[-77, -82, -74, -70, -73],[-77, -82, -76, -70, -73],[-77, -82, -76, -70, -79],[-77, -72, -76, -64, -79],[-77, -72, -84, -64, -79],[-77, -72, -70, -64, -79],[-77, -64, -70, -57, -79],[-73, -64, -70, -57, -79],[-74, -64, -70, -57, -79],[-74, -70, -70, -57, -79],[-74, -70, -70, -61, -79],[-74, -74, -70, -66, -79],[-74, -74, -70, -66, -68],[-74, -74, -70, -66, -67],[-74, -74, -70, -59, -67],[-68, -68, -70, -52, -67],[-68, -68, -69, -52, -67],[-74, -68, -69, -52, -67],[-74, -66, -69, -64, -67],[-66, -66, -69, -64, -67],[-66, -66, -69, -64, -71],[-66, -66, -69, -54, -71],[-66, -66, -68, -54, -71],[-66, -66, -74, -54, -71],[-66, -66, -74, -54, -66],[-68, -62, -74, -54, -66],[-68, -62, -74, -62, -66],[-68, -62, -71, -62, -66],[-67, -62, -71, -62, -66],[-67, -64, -71, -62, -66],[-67, -64, -62, -62, -66],[-76, -64, -62, -62, -66],[-76, -64, -62, -57, -66],[-76, -64, -63, -57, -66],[-76, -64, -63, -57, -62],[-76, -64, -63, -57, -65],[-68, -62, -63, -57, -65],[-68, -62, -69, -57, -65],[-68, -62, -69, -65, -65],[-68, -62, -72, -65, -65],[-68, -62, -72, -55, -65],[-68, -62, -72, -52, -65],[-68, -63, -72, -52, -65],[-68, -63, -72, -59, -65],[-68, -63, -72, -55, -65],[-68, -63, -72, -55, -67],[-68, -67, -72, -55, -67],[-68, -67, -64, -55, -67],[-68, -56, -64, -52, -67],[-68, -54, -64, -52, -68],[-68, -54, -66, -52, -68],[-68, -54, -66, -52, -66],
# [-64, -70, -52, -73, -62],[-64, -70, -49, -73, -62],[-64, -70, -49, -73, -60],[-64, -64, -49, -73, -60],[-64, -64, -49, -73, -69],[-59, -64, -49, -73, -69],[-62, -64, -49, -73, -69],[-62, -64, -49, -77, -69],[-64, -64, -49, -77, -69],[-64, -64, -34, -77, -69],[-64, -64, -34, -77, -70],[-64, -64, -34, -66, -70],[-64, -70, -34, -66, -70],[-64, -70, -51, -66, -70],[-64, -70, -51, -62, -70],[-64, -73, -51, -62, -70],[-64, -73, -51, -65, -70],[-64, -73, -51, -65, -79],[-64, -73, -51, -73, -79],[-64, -73, -51, -73, -72],[-70, -73, -51, -73, -72],[-70, -73, -51, -73, -66],[-70, -73, -45, -73, -66],[-70, -73, -45, -65, -66],[-62, -73, -45, -65, -66],[-62, -73, -45, -72, -66],[-60, -73, -45, -72, -66],[-60, -73, -50, -72, -66],[-60, -66, -50, -72, -66],[-60, -66, -50, -72, -67],[-60, -66, -50, -67, -67],[-60, -66, -50, -67, -73],[-70, -66, -50, -67, -73],[-70, -73, -50, -67, -73],[-70, -73, -50, -67, -67],[-70, -67, -50, -67, -67],[-70, -67, -50, -67, -73],[-70, -76, -50, -67, -73],[-66, -76, -50, -67, -73],[-66, -76, -51, -67, -73],[-73, -76, -51, -67, -73],[-73, -72, -51, -67, -73],[-73, -72, -51, -67, -77],[-73, -72, -44, -67, -77],[-73, -78, -44, -67, -77],[-73, -78, -38, -67, -77],[-73, -78, -38, -67, -70],[-73, -78, -48, -67, -70],[-73, -78, -55, -67, -70],[-73, -78, -58, -67, -70],[-73, -78, -58, -67, -74],[-64, -78, -58, -67, -74],[-64, -78, -66, -67, -74],[-64, -78, -66, -66, -74],[-68, -78, -66, -66, -74],[-68, -78, -66, -66, -68],[-68, -78, -58, -66, -68],[-68, -78, -58, -63, -68],[-68, -78, -58, -61, -68],[-64, -78, -58, -61, -68],[-64, -78, -58, -58, -68],[-64, -78, -65, -58, -68],[-64, -78, -66, -58, -68],[-63, -78, -66, -58, -68],[-63, -78, -66, -73, -68],[-64, -78, -66, -73, -68],[-64, -78, -52, -73, -68],[-64, -78, -52, -64, -68],[-64, -75, -52, -64, -68],[-64, -75, -52, -64, -78],[-64, -75, -47, -64, -78],[-64, -75, -48, -64, -78],[-64, -75, -48, -63, -78],[-60, -75, -48, -63, -78],[-60, -75, -48, -65, -78],[-60, -68, -48, -65, -78],[-60, -68, -58, -65, -78],[-60, -74, -58, -65, -78],[-64, -74, -58, -65, -78],[-64, -74, -53, -65, -78],[-61, -74, -53, -65, -78],[-61, -74, -64, -65, -78],[-70, -74, -64, -65, -78],[-63, -74, -64, -65, -78],[-63, -74, -62, -65, -78],[-63, -74, -66, -65, -78],[-63, -74, -83, -65, -78],[-63, -74, -83, -77, -78],[-72, -74, -83, -77, -78],[-72, -74, -42, -77, -78],[-72, -70, -42, -77, -78],[-72, -70, -42, -77, -72],[-72, -70, -42, -75, -72],[-72, -70, -42, -75, -73],[-75, -70, -42, -75, -73],[-75, -70, -54, -75, -73],[-75, -64, -54, -75, -73],[-75, -64, -54, -75, -70],[-72, -64, -54, -75, -70],[-72, -64, -55, -75, -70],[-72, -65, -55, -75, -70],[-72, -65, -55, -75, -72],[-70, -65, -55, -75, -72],[-70, -65, -55, -70, -72],[-70, -65, -42, -70, -72],[-70, -65, -42, -67, -72],[-70, -65, -42, -67, -84],[-70, -65, -42, -67, -70],[-72, -65, -42, -67, -70],[-72, -65, -60, -67, -70],[-72, -65, -60, -66, -70],[-66, -65, -60, -66, -70],[-66, -65, -56, -66, -70],[-66, -65, -56, -66, -64],[-66, -65, -56, -63, -64],[-66, -65, -54, -63, -64],[-66, -65, -54, -72, -64],[-66, -65, -54, -72, -68],[-66, -65, -54, -63, -68],[-72, -65, -54, -63, -68],[-68, -65, -54, -63, -68],[-68, -65, -54, -63, -76],[-69, -65, -54, -63, -76],[-69, -65, -58, -63, -76],[-66, -65, -58, -63, -76],[-66, -65, -61, -63, -76],[-66, -58, -61, -63, -76],[-66, -58, -61, -66, -76],[-66, -64, -61, -66, -76],[-66, -64, -61, -66, -67],[-73, -64, -61, -66, -67],[-73, -64, -61, -67, -67],[-73, -64, -50, -67, -67],[-73, -64, -50, -66, -67],[-73, -64, -50, -66, -75],[-78, -64, -50, -66, -75],[-78, -72, -50, -66, -75],[-78, -72, -50, -66, -73],[-80, -72, -50, -66, -73],[-80, -72, -52, -66, -73],[-80, -72, -52, -71, -73],[-80, -71, -52, -71, -73],[-80, -71, -52, -71, -68],[-74, -71, -52, -71, -68],[-74, -72, -52, -71, -68],[-74, -72, -52, -71, -74],[-66, -72, -52, -71, -74],[-66, -80, -52, -71, -74],[-71, -80, -52, -71, -74],[-71, -80, -48, -71, -74],[-71, -80, -47, -71, -74],[-80, -80, -47, -71, -74],[-80, -80, -44, -71, -74],[-80, -61, -44, -71, -74],[-80, -64, -44, -71, -74],[-80, -64, -44, -71, -75],[-62, -64, -44, -71, -75],[-62, -64, -50, -71, -75],[-62, -64, -50, -72, -75],[-62, -64, -50, -72, -76],[-62, -64, -50, -78, -76],[-68, -64, -50, -78, -76],[-68, -64, -49, -78, -76],[-58, -64, -49, -78, -76],[-58, -61, -49, -78, -76],[-58, -61, -49, -64, -76],[-58, -61, -49, -64, -74],[-71, -61, -49, -64, -74],[-71, -61, -51, -64, -74],[-71, -61, -51, -65, -74],[-66, -61, -51, -65, -74],[-66, -61, -51, -67, -74],[-66, -72, -51, -67, -74],[-66, -72, -51, -67, -78],[-66, -72, -51, -75, -78],[-66, -72, -51, -75, -72],[-63, -72, -51, -75, -72],[-74, -72, -51, -75, -72],[-74, -72, -51, -65, -72],[-74, -65, -51, -65, -72],[-74, -65, -59, -65, -72],[-74, -64, -59, -65, -72],[-74, -64, -68, -65, -72],[-66, -64, -68, -65, -72],[-72, -64, -68, -65, -72],[-64, -64, -68, -65, -72],[-64, -64, -68, -72, -72],[-64, -64, -55, -72, -72],[-64, -64, -55, -78, -72],[-64, -64, -55, -78, -81],[-64, -64, -55, -78, -74],[-64, -64, -55, -78, -73],[-64, -64, -60, -78, -73],[-64, -64, -60, -73, -73],[-64, -64, -45, -73, -73],[-64, -64, -45, -73, -76],[-64, -64, -45, -73, -74],[-64, -64, -45, -73, -85],[-62, -64, -45, -73, -85],[-62, -64, -45, -74, -85],[-62, -64, -48, -74, -85],[-62, -64, -48, -89, -85],[-80, -64, -48, -89, -85],[-80, -64, -48, -71, -85],[-80, -64, -51, -71, -85],[-80, -71, -51, -71, -85],[-80, -71, -51, -71, -73],[-78, -71, -51, -71, -73],[-70, -71, -51, -71, -73],[-70, -71, -51, -80, -73],[-70, -72, -51, -80, -73],[-68, -72, -51, -80, -73],[-68, -72, -51, -77, -73],[-68, -72, -50, -77, -73],[-68, -72, -55, -77, -73],[-68, -72, -57, -77, -73],[-68, -72, -58, -77, -73],[-68, -72, -58, -67, -73],[-68, -68, -58, -67, -73],[-68, -68, -58, -67, -66],[-72, -68, -58, -67, -66],[-72, -68, -59, -67, -66],[-72, -68, -59, -66, -66],[-72, -67, -59, -66, -66],[-72, -67, -70, -66, -66],[-72, -61, -70, -66, -66],[-72, -61, -70, -66, -87],[-67, -61, -70, -66, -87],[-67, -61, -70, -66, -73],[-73, -61, -70, -66, -73],[-73, -61, -70, -66, -70],[-62, -61, -70, -66, -70],[-62, -61, -70, -66, -69],[-62, -61, -70, -66, -90],[-73, -61, -70, -66, -90],[-73, -61, -46, -66, -90],[-70, -61, -46, -66, -90],[-70, -74, -46, -66, -90],[-70, -74, -52, -66, -90],[-70, -72, -52, -66, -90],[-70, -72, -52, -66, -72],[-70, -72, -44, -66, -72],[-70, -72, -44, -66, -67],[-64, -72, -44, -66, -67],[-64, -72, -45, -66, -67],[-64, -72, -45, -74, -67],[-64, -71, -45, -74, -67],[-64, -71, -45, -74, -72],[-74, -71, -45, -74, -72],[-74, -71, -45, -74, -74],[-80, -71, -45, -74, -74],[-80, -71, -54, -74, -74],[-80, -65, -54, -74, -74],[-80, -65, -58, -74, -74],[-80, -63, -58, -74, -74],[-80, -63, -55, -74, -74],[-80, -63, -55, -65, -74],[-80, -69, -52, -65, -74],[-80, -69, -55, -65, -74],[-70, -69, -55, -65, -74],


trainData = [
    [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5, [10] * 5
]

# 1: left rack left 2: door left 3: door right 4: right rack right
# -------------0: far 1: door right 2: right rack right 3:  door left 4:left rack left
label = list()
label.extend([0]*10)
# label.extend([1]*135)
# label.extend([2]*260)

# from rpsc.utils.fpLocalize import RoomClassifier
# import numpy as np
# clf = RoomClassifier()
# clf.fit(trainData, label)
#
# rssis = [[-69, -72, -74, -70, -65], [-76, -73, -67, -74, -67], [-64, -80, -70, -83, -73], [-72, -63, -63, -66, -71]]
# locs = clf.classifier.predict(rssis)
# print locs, max(map(lambda x: (np.sum(locs==x), x), locs))[1]

# with open("./traindatas", 'wb') as outfile:
#     pickle.dump({
#         'fingerprints': trainData,
#         'label': label
#     }, outfile)